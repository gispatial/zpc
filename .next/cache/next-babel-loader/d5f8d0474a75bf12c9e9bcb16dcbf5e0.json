{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport _getIterator from \"@babel/runtime-corejs2/core-js/get-iterator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/crocslut/Desktop/Git/zpc/components/FloatGrid/Row.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { WidthProvider, Responsive } from 'react-grid-layout';\nimport { Row as BSRow } from 'reactstrap';\nimport { FloatGridContext } from './floatGridContext';\nvar ResponsiveGrid = WidthProvider(Responsive);\nvar responsiveBreakpoints = {\n  xl: 1139,\n  lg: 959,\n  md: 719,\n  sm: 539,\n  xs: 0 //xl: Number.MAX_VALUE, lg: 1199, md: 991, sm: 767, xs: 576\n\n};\n\nvar breakPointSteps = _.keys(responsiveBreakpoints);\n\nvar TOTAL_ROW = 12;\n\nvar simplifyChildrenArray = function simplifyChildrenArray(reactChildren) {\n  return _.map(reactChildren, function (child) {\n    return _objectSpread({}, child, {\n      key: child.key.replace(/\\.\\$/g, '')\n    });\n  });\n};\n\nexport var Row =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Row, _React$Component);\n\n  function Row() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Row);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Row)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"_lastLayouts\", {});\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      trueColSizes: {},\n      activeLayout: 'xl'\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"initialDebounceTimeout\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"_updateTrueColSizes\", function (layout) {\n      var trueColSizes = _this.state.trueColSizes;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = _getIterator(layout), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var child = _step.value;\n          trueColSizes[child.i] = _this.context.gridUnitsToPx(child.w, child.h);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      _this.setState({\n        trueColSizes: trueColSizes\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_findClosestBreakpoint\", function (breakpoint, definition) {\n      var found = 12;\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = _getIterator(_.drop(breakPointSteps, _.indexOf(breakPointSteps, breakpoint))), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var bp = _step2.value;\n\n          if (!_.isUndefined(definition[bp])) {\n            found = definition[bp];\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n            _iterator2[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      return found;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_calculateLayouts\", function (children) {\n      var output = {};\n      var childrenArray = React.Children.toArray(children);\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = _getIterator(breakPointSteps), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var breakPoint = _step3.value;\n          var rowChildren = [];\n          var rowCounter = 0;\n          var y = 0;\n          var _iteratorNormalCompletion4 = true;\n          var _didIteratorError4 = false;\n          var _iteratorError4 = undefined;\n\n          try {\n            for (var _iterator4 = _getIterator(childrenArray), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n              var child = _step4.value;\n              var bpData = {}; // Save the props for current child and breakpoint\n\n              var config = _.pick(child.props, ['i', 'h', 'minH', 'maxH', 'minW', 'maxW', breakPoint, \"\".concat(breakPoint, \"MinW\"), \"\".concat(breakPoint, \"MaxW\"), 'moved', 'static', 'isResizable', 'isDraggable']); // Calculate the needed definition\n\n\n              bpData = _Object$assign(bpData, _objectSpread({}, config, {\n                // Set the x to the calculated value or take from the \n                // props if defined for controlled type\n                x: _.isUndefined(child.props[\"\".concat(breakPoint, \"X\")]) ? rowCounter : child.props[\"\".concat(breakPoint, \"X\")],\n                h: child.props[\"\".concat(breakPoint, \"H\")] || config.h || 1,\n                minH: config.minH || config.h || 1,\n                maxH: config.maxH || config.h || 1\n              }, {\n                w: config[breakPoint] || _this._findClosestBreakpoint(breakPoint, child.props),\n                // Set the y to the calculated value or take from the \n                // props if defined for controlled type\n                y: _.isUndefined(child.props[\"\".concat(breakPoint, \"Y\")]) ? y : child.props[\"\".concat(breakPoint, \"Y\")]\n              }));\n              rowChildren = [].concat(_toConsumableArray(rowChildren), [bpData]);\n              rowCounter += bpData.w;\n\n              if (rowCounter + bpData.x > TOTAL_ROW) {\n                // Increase by the largest found height\n                y += _.max(_.map(rowChildren, 'h'));\n                rowCounter = 0;\n                rowChildren = [];\n              }\n\n              output = _objectSpread({}, output, _defineProperty({}, breakPoint, [].concat(_toConsumableArray(output[breakPoint] || []), [bpData])));\n            }\n          } catch (err) {\n            _didIteratorError4 = true;\n            _iteratorError4 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion4 && _iterator4[\"return\"] != null) {\n                _iterator4[\"return\"]();\n              }\n            } finally {\n              if (_didIteratorError4) {\n                throw _iteratorError4;\n              }\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3[\"return\"] != null) {\n            _iterator3[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      return output;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_transformForChangeHandler\", function (layouts) {\n      var output = {};\n      var _iteratorNormalCompletion5 = true;\n      var _didIteratorError5 = false;\n      var _iteratorError5 = undefined;\n\n      try {\n        for (var _iterator5 = _getIterator(breakPointSteps), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n          var breakPoint = _step5.value;\n          var bpLayout = layouts[breakPoint];\n          var _iteratorNormalCompletion6 = true;\n          var _didIteratorError6 = false;\n          var _iteratorError6 = undefined;\n\n          try {\n            for (var _iterator6 = _getIterator(bpLayout), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n              var _objectSpread3;\n\n              var element = _step6.value;\n              output[element.i] = _objectSpread({}, output[element.i], element, (_objectSpread3 = {}, _defineProperty(_objectSpread3, breakPoint, element.w), _defineProperty(_objectSpread3, \"\".concat(breakPoint, \"X\"), element.x), _defineProperty(_objectSpread3, \"\".concat(breakPoint, \"Y\"), element.y), _defineProperty(_objectSpread3, \"\".concat(breakPoint, \"H\"), element.h), _objectSpread3));\n            }\n          } catch (err) {\n            _didIteratorError6 = true;\n            _iteratorError6 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion6 && _iterator6[\"return\"] != null) {\n                _iterator6[\"return\"]();\n              }\n            } finally {\n              if (_didIteratorError6) {\n                throw _iteratorError6;\n              }\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError5 = true;\n        _iteratorError5 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion5 && _iterator5[\"return\"] != null) {\n            _iterator5[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError5) {\n            throw _iteratorError5;\n          }\n        }\n      }\n\n      return output;\n    });\n\n    return _this;\n  }\n\n  _createClass(Row, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(nextProps) {\n      if (!_.isEqual(nextProps.gridSize, this.props.gridSize)) {\n        if (!_.isEmpty(this._lastLayouts)) {\n          this._updateTrueColSizes(this._lastLayouts[this.state.activeLayout]);\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          children = _this$props.children,\n          rowHeight = _this$props.rowHeight,\n          _onLayoutChange = _this$props.onLayoutChange,\n          otherProps = _objectWithoutProperties(_this$props, [\"children\", \"rowHeight\", \"onLayoutChange\"]);\n\n      var trueColSizes = this.state.trueColSizes;\n\n      if (this.context.active) {\n        var layouts = this._lastLayouts = this._calculateLayouts(children);\n\n        var adjustedChildren = simplifyChildrenArray(React.Children.map(children, function (child) {\n          return React.cloneElement(child, {\n            trueSize: trueColSizes[child.props.i]\n          });\n        }));\n        return React.createElement(ResponsiveGrid, _extends({\n          cols: {\n            xl: 12,\n            lg: 12,\n            md: 12,\n            sm: 12,\n            xs: 12\n          },\n          breakpoints: responsiveBreakpoints,\n          layouts: layouts,\n          padding: [0, 0],\n          margin: [0, 0],\n          rowHeight: rowHeight,\n          onLayoutChange: function onLayoutChange(currentLayout, allLayouts) {\n            // Notify the parent\n            _onLayoutChange(_this2._transformForChangeHandler(allLayouts)); // Recalculate true sizes\n\n\n            _this2._updateTrueColSizes(currentLayout);\n\n            clearTimeout(_this2.initialDebounceTimeout);\n            _this2.initialDebounceTimeout = setTimeout(function () {\n              _this2.context.setGridReady();\n            }, 0);\n          },\n          onBreakpointChange: function onBreakpointChange(activeLayout) {\n            _this2.setState({\n              activeLayout: activeLayout\n            });\n          },\n          onResize: function onResize(layout, oldItem, newItem) {\n            _this2.setState({\n              trueColSizes: _objectSpread({}, trueColSizes, _defineProperty({}, newItem.i, _this2.context.gridUnitsToPx(newItem.w, newItem.h)))\n            });\n          }\n        }, otherProps, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        }), adjustedChildren);\n      } else {\n        var _adjustedChildren = React.Children.map(children, function (child) {\n          return React.cloneElement(child, {\n            active: false\n          });\n        });\n\n        return React.createElement(BSRow, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        }, _adjustedChildren);\n      }\n    }\n  }]);\n\n  return Row;\n}(React.Component);\n\n_defineProperty(Row, \"propTypes\", {\n  children: PropTypes.node,\n  columns: PropTypes.object,\n  onLayoutChange: PropTypes.func,\n  rowHeight: PropTypes.number,\n  gridSize: PropTypes.object\n});\n\n_defineProperty(Row, \"contextType\", FloatGridContext);","map":{"version":3,"sources":["/Users/crocslut/Desktop/Git/zpc/components/FloatGrid/Row.js"],"names":["React","PropTypes","_","WidthProvider","Responsive","Row","BSRow","FloatGridContext","ResponsiveGrid","responsiveBreakpoints","xl","lg","md","sm","xs","breakPointSteps","keys","TOTAL_ROW","simplifyChildrenArray","reactChildren","map","child","key","replace","trueColSizes","activeLayout","layout","state","i","context","gridUnitsToPx","w","h","setState","breakpoint","definition","found","drop","indexOf","bp","isUndefined","children","output","childrenArray","Children","toArray","breakPoint","rowChildren","rowCounter","y","bpData","config","pick","props","x","minH","maxH","_findClosestBreakpoint","max","layouts","bpLayout","element","nextProps","isEqual","gridSize","isEmpty","_lastLayouts","_updateTrueColSizes","rowHeight","onLayoutChange","otherProps","active","_calculateLayouts","adjustedChildren","cloneElement","trueSize","currentLayout","allLayouts","_transformForChangeHandler","clearTimeout","initialDebounceTimeout","setTimeout","setGridReady","oldItem","newItem","Component","node","columns","object","func","number"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport {\n    WidthProvider,\n    Responsive\n} from 'react-grid-layout';\nimport { Row as BSRow } from 'reactstrap';\n\nimport { FloatGridContext } from './floatGridContext';\n\nconst ResponsiveGrid = WidthProvider(Responsive);\nconst responsiveBreakpoints = {\n    xl: 1139, lg: 959, md: 719, sm: 539, xs: 0\n    //xl: Number.MAX_VALUE, lg: 1199, md: 991, sm: 767, xs: 576\n};\nconst breakPointSteps = _.keys(responsiveBreakpoints);\nconst TOTAL_ROW = 12;\n\nconst simplifyChildrenArray = (reactChildren) => _.map(reactChildren, child => (\n    { ...child, key: child.key.replace(/\\.\\$/g, '') }\n));\n\nexport class Row extends React.Component {\n    static propTypes = {\n        children: PropTypes.node,\n        columns: PropTypes.object,\n        onLayoutChange: PropTypes.func,\n        rowHeight: PropTypes.number,\n        gridSize: PropTypes.object\n    };\n\n    static contextType = FloatGridContext;\n\n    _lastLayouts = { };\n    state = {\n        trueColSizes: { },\n        activeLayout: 'xl'\n    }\n    initialDebounceTimeout = false;\n\n    componentDidUpdate(nextProps) {\n        if (!_.isEqual(nextProps.gridSize, this.props.gridSize)) {\n            if (!_.isEmpty(this._lastLayouts)) {\n                this._updateTrueColSizes(this._lastLayouts[this.state.activeLayout]);\n            }\n        }\n    }\n\n    render() {\n        const { children, rowHeight, onLayoutChange, ...otherProps } = this.props;\n        const { trueColSizes } = this.state;\n\n        if (this.context.active) {\n            const layouts = this._lastLayouts = this._calculateLayouts(children);\n            const adjustedChildren = simplifyChildrenArray(\n                React.Children.map(children, (child) =>\n                    React.cloneElement(child, { trueSize: trueColSizes[child.props.i] })));\n\n            return (\n                <ResponsiveGrid\n                    cols={{ xl: 12, lg: 12, md: 12, sm: 12, xs: 12 }}\n                    breakpoints={ responsiveBreakpoints }\n                    layouts={ layouts }\n                    padding={ [ 0, 0 ] }\n                    margin={ [ 0, 0 ] }\n                    rowHeight={ rowHeight }\n                    onLayoutChange={(currentLayout, allLayouts) => {\n                        // Notify the parent\n                        onLayoutChange(this._transformForChangeHandler(allLayouts));\n                        // Recalculate true sizes\n                        this._updateTrueColSizes(currentLayout);\n\n                        clearTimeout(this.initialDebounceTimeout);\n                        this.initialDebounceTimeout = setTimeout(() => {\n                            this.context.setGridReady();\n                        }, 0);\n                    }}\n                    onBreakpointChange={(activeLayout) => {\n                        this.setState({ activeLayout });\n                    }}\n                    onResize={\n                        (layout, oldItem, newItem) => {\n                            this.setState({\n                                trueColSizes: {\n                                    ...trueColSizes,\n                                    [newItem.i]: this.context.gridUnitsToPx(newItem.w, newItem.h)\n                                }\n                            });\n                        }\n                    }\n                    { ...otherProps }\n                >\n                    { adjustedChildren }\n                </ResponsiveGrid>\n            );\n        } else {\n            const adjustedChildren = React.Children.map(children, (child) =>\n                React.cloneElement(child, { active: false }));\n            \n            return (\n                <BSRow>\n                    { adjustedChildren }\n                </BSRow>\n            );\n        }\n    }\n\n    _updateTrueColSizes = (layout) => {\n        const { trueColSizes } = this.state;\n        for (let child of layout) {\n            trueColSizes[child.i] = this.context.gridUnitsToPx(child.w, child.h);\n        }\n        this.setState({ trueColSizes });\n    }\n\n    /**\n     * Finds the nearest breakpoint relative to the one provided in the\n     * first param. For example - when the `definition` param contains\n     * such bps - { md: 6, xs: 8 }, for `breakpoint` - xl/md will return 6\n     */\n    _findClosestBreakpoint = (breakpoint, definition) => {\n        let found = 12;\n        for (let bp of _.drop(breakPointSteps, _.indexOf(breakPointSteps, breakpoint))) {\n            if (!_.isUndefined(definition[bp])) {\n                found = definition[bp];\n            }\n        }\n        return found;\n    }\n\n    _calculateLayouts = (children) => {\n        let output = { };\n        const childrenArray = React.Children.toArray(children);\n        for (let breakPoint of breakPointSteps) {\n            let rowChildren = [];\n            let rowCounter = 0;\n            let y = 0;\n            for (let child of childrenArray) {\n                let bpData = { };\n                // Save the props for current child and breakpoint\n                const config = _.pick(child.props, [\n                    'i',\n                    'h', 'minH', 'maxH',\n                    'minW', 'maxW',\n                    breakPoint, `${breakPoint}MinW`, `${breakPoint}MaxW`,\n                    'moved', 'static', 'isResizable', 'isDraggable'\n                ]);\n                // Calculate the needed definition\n                bpData = Object.assign(bpData, {\n                    ...config,\n                    // Add default heights when none provided\n                    ...{\n                        // Set the x to the calculated value or take from the \n                        // props if defined for controlled type\n                        x: _.isUndefined(child.props[`${breakPoint}X`]) ?\n                            rowCounter : child.props[`${breakPoint}X`],\n                        h: child.props[`${breakPoint}H`] || config.h || 1,\n                        minH: config.minH || (config.h || 1),\n                        maxH: config.maxH || (config.h || 1),\n                    },\n                    w: config[breakPoint] ||\n                        this._findClosestBreakpoint(breakPoint, child.props),\n                    // Set the y to the calculated value or take from the \n                    // props if defined for controlled type\n                    y: _.isUndefined(child.props[`${breakPoint}Y`]) ?\n                        y : child.props[`${breakPoint}Y`]\n                });\n                rowChildren = [...rowChildren, bpData];\n                rowCounter += bpData.w;\n                if (rowCounter + bpData.x > TOTAL_ROW) {\n                    // Increase by the largest found height\n                    y += _.max(_.map(rowChildren, 'h'));\n                    rowCounter = 0;\n                    rowChildren = [];\n                }\n                output = {\n                    ...output,\n                    [breakPoint]: [...(output[breakPoint] || []), bpData]\n                }\n            }\n        }\n        return output;\n    }\n\n    /**\n     * Transform the calculated layout to a structure\n     * which is provided by `layouts` props\n     */\n    _transformForChangeHandler = (layouts) => {\n        let output = { };\n        for (let breakPoint of breakPointSteps) {\n            const bpLayout = layouts[breakPoint];\n            for (let element of bpLayout) {\n                output[element.i] = {\n                    ...(output[element.i]),\n                    ...(element),\n                    [breakPoint]: element.w,\n                    [`${breakPoint}X`]: element.x,\n                    [`${breakPoint}Y`]: element.y,\n                    [`${breakPoint}H`]: element.h\n                }\n            }\n        }\n        return output;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}