{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport _ from 'lodash'; // Safely gets the browser document object,\n// returns a simple mock for server rendering purposes\n\nvar getDocument = function getDocument() {\n  return typeof document === 'undefined' ? {\n    querySelector: function querySelector() {\n      return null;\n    }\n  } : document;\n};\n/*\n    Calls an EventHandler when User clicks outside of the child element\n*/\n\n\nvar OuterClick =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(OuterClick, _React$Component);\n\n  function OuterClick() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, OuterClick);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(OuterClick)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDocumentClick\", function (evt) {\n      if (_this.props.active) {\n        // eslint-disable-next-line react/no-find-dom-node\n        var domElement = ReactDOM.findDOMNode(_this.elementRef);\n\n        var isExcluded = _.some(_this.props.excludedElements, // eslint-disable-next-line react/no-find-dom-node\n        function (element) {\n          return element && ReactDOM.findDOMNode(element).contains(evt.target);\n        });\n\n        if (!isExcluded && !domElement.contains(evt.target)) {\n          _this.props.onClickOutside(evt);\n        }\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(OuterClick, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.rootElement = getDocument().querySelector('body');\n\n      if (this.rootElement) {\n        this.rootElement.addEventListener('click', this.handleDocumentClick);\n        this.rootElement.addEventListener('touchstart', this.handleDocumentClick);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.rootElement) {\n        this.rootElement.removeEventListener('click', this.handleDocumentClick);\n        this.rootElement.removeEventListener('touchstart', this.handleDocumentClick);\n      }\n    }\n  }, {\n    key: \"assignRef\",\n    value: function assignRef(elementRef) {\n      this.elementRef = elementRef;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var onlyChild = React.Children.only(this.props.children);\n      var updatedChild = React.isValidElement(onlyChild) ? React.cloneElement(onlyChild, {\n        ref: this.assignRef.bind(this)\n      }) : onlyChild;\n      return updatedChild;\n    }\n  }]);\n\n  return OuterClick;\n}(React.Component);\n\n_defineProperty(OuterClick, \"propTypes\", {\n  onClickOutside: PropTypes.func,\n  children: PropTypes.node,\n  excludedElements: PropTypes.array,\n  active: PropTypes.bool\n});\n\n_defineProperty(OuterClick, \"defaultProps\", {\n  onClickOutside: function onClickOutside() {},\n  excludedElements: [],\n  active: true\n});\n\nexport { OuterClick };","map":{"version":3,"sources":["/Users/crocslut/Desktop/Git/zpc/components/OuterClick/OuterClick.js"],"names":["React","PropTypes","ReactDOM","_","getDocument","document","querySelector","OuterClick","evt","props","active","domElement","findDOMNode","elementRef","isExcluded","some","excludedElements","element","contains","target","onClickOutside","rootElement","addEventListener","handleDocumentClick","removeEventListener","onlyChild","Children","only","children","updatedChild","isValidElement","cloneElement","ref","assignRef","bind","Component","func","node","array","bool"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,CAAP,MAAc,QAAd,C,CAEA;AACA;;AACA,IAAMC,WAAW,GAAG,SAAdA,WAAc;AAAA,SAChB,OAAOC,QAAP,KAAoB,WAApB,GACI;AACIC,IAAAA,aADJ,2BACoB;AAAE,aAAO,IAAP;AAAc;AADpC,GADJ,GAGQD,QAJQ;AAAA,CAApB;AAMA;;;;;IAGME,U;;;;;;;;;;;;;;;;;;0EAkCoB,UAACC,GAAD,EAAS;AAC3B,UAAG,MAAKC,KAAL,CAAWC,MAAd,EAAsB;AAClB;AACA,YAAMC,UAAU,GAAGT,QAAQ,CAACU,WAAT,CAAqB,MAAKC,UAA1B,CAAnB;;AAEA,YAAMC,UAAU,GAAGX,CAAC,CAACY,IAAF,CAAO,MAAKN,KAAL,CAAWO,gBAAlB,EACf;AACA,kBAACC,OAAD;AAAA,iBAAaA,OAAO,IAAIf,QAAQ,CAACU,WAAT,CAAqBK,OAArB,EAA8BC,QAA9B,CAAuCV,GAAG,CAACW,MAA3C,CAAxB;AAAA,SAFe,CAAnB;;AAIA,YAAI,CAACL,UAAD,IAAe,CAACH,UAAU,CAACO,QAAX,CAAoBV,GAAG,CAACW,MAAxB,CAApB,EAAqD;AACjD,gBAAKV,KAAL,CAAWW,cAAX,CAA0BZ,GAA1B;AACH;AACJ;AACJ,K;;;;;;;wCAjCmB;AAChB,WAAKa,WAAL,GAAmBjB,WAAW,GAAGE,aAAd,CAA4B,MAA5B,CAAnB;;AAEA,UAAI,KAAKe,WAAT,EAAsB;AAClB,aAAKA,WAAL,CAAiBC,gBAAjB,CAAkC,OAAlC,EAA2C,KAAKC,mBAAhD;AACA,aAAKF,WAAL,CAAiBC,gBAAjB,CAAkC,YAAlC,EAAgD,KAAKC,mBAArD;AACH;AACJ;;;2CAEsB;AACnB,UAAI,KAAKF,WAAT,EAAsB;AAClB,aAAKA,WAAL,CAAiBG,mBAAjB,CAAqC,OAArC,EAA8C,KAAKD,mBAAnD;AACA,aAAKF,WAAL,CAAiBG,mBAAjB,CAAqC,YAArC,EAAmD,KAAKD,mBAAxD;AACH;AACJ;;;8BAESV,U,EAAY;AAClB,WAAKA,UAAL,GAAkBA,UAAlB;AACH;;;6BAiBQ;AACL,UAAMY,SAAS,GAAGzB,KAAK,CAAC0B,QAAN,CAAeC,IAAf,CAAoB,KAAKlB,KAAL,CAAWmB,QAA/B,CAAlB;AAEA,UAAMC,YAAY,GAAG7B,KAAK,CAAC8B,cAAN,CAAqBL,SAArB,IACjBzB,KAAK,CAAC+B,YAAN,CAAmBN,SAAnB,EAA8B;AAAEO,QAAAA,GAAG,EAAE,KAAKC,SAAL,CAAeC,IAAf,CAAoB,IAApB;AAAP,OAA9B,CADiB,GACmDT,SADxE;AAGA,aAAOI,YAAP;AACH;;;;EAxDoB7B,KAAK,CAACmC,S;;gBAAzB5B,U,eACiB;AACfa,EAAAA,cAAc,EAAEnB,SAAS,CAACmC,IADX;AAEfR,EAAAA,QAAQ,EAAE3B,SAAS,CAACoC,IAFL;AAGfrB,EAAAA,gBAAgB,EAAEf,SAAS,CAACqC,KAHb;AAIf5B,EAAAA,MAAM,EAAET,SAAS,CAACsC;AAJH,C;;gBADjBhC,U,kBAQoB;AAClBa,EAAAA,cAAc,EAAE,0BAAM,CAAG,CADP;AAElBJ,EAAAA,gBAAgB,EAAE,EAFA;AAGlBN,EAAAA,MAAM,EAAE;AAHU,C;;AAmD1B,SAASH,UAAT","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport _ from 'lodash';\n\n// Safely gets the browser document object,\n// returns a simple mock for server rendering purposes\nconst getDocument = () =>\n    typeof document === 'undefined' ?\n        {\n            querySelector() { return null; }\n        } : document\n\n/*\n    Calls an EventHandler when User clicks outside of the child element\n*/\nclass OuterClick extends React.Component {\n    static propTypes = {\n        onClickOutside: PropTypes.func,\n        children: PropTypes.node,\n        excludedElements: PropTypes.array,\n        active: PropTypes.bool\n    }\n\n    static defaultProps = {\n        onClickOutside: () => { },\n        excludedElements: [],\n        active: true\n    }\n\n    componentDidMount() {\n        this.rootElement = getDocument().querySelector('body');\n\n        if (this.rootElement) {\n            this.rootElement.addEventListener('click', this.handleDocumentClick);\n            this.rootElement.addEventListener('touchstart', this.handleDocumentClick);\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.rootElement) {\n            this.rootElement.removeEventListener('click', this.handleDocumentClick);\n            this.rootElement.removeEventListener('touchstart', this.handleDocumentClick);\n        }\n    }\n\n    assignRef(elementRef) {\n        this.elementRef = elementRef;\n    }\n\n    handleDocumentClick = (evt) => {\n        if(this.props.active) {\n            // eslint-disable-next-line react/no-find-dom-node\n            const domElement = ReactDOM.findDOMNode(this.elementRef);\n\n            const isExcluded = _.some(this.props.excludedElements,\n                // eslint-disable-next-line react/no-find-dom-node\n                (element) => element && ReactDOM.findDOMNode(element).contains(evt.target));\n\n            if (!isExcluded && !domElement.contains(evt.target)) {\n                this.props.onClickOutside(evt);\n            }\n        }\n    }\n\n    render() {\n        const onlyChild = React.Children.only(this.props.children);\n\n        const updatedChild = React.isValidElement(onlyChild) ?\n            React.cloneElement(onlyChild, { ref: this.assignRef.bind(this) }) : onlyChild;\n\n        return updatedChild;\n    }\n}\n\nexport { OuterClick };"]},"metadata":{},"sourceType":"module"}