{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/crocslut/Desktop/Git/zpc/components/Navbar/navbar.js\";\nimport React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { Navbar as BSNavbar, Container } from 'reactstrap';\n\nvar Navbar = function Navbar(_ref) {\n  var themed = _ref.themed,\n      fluid = _ref.fluid,\n      shadow = _ref.shadow,\n      className = _ref.className,\n      children = _ref.children,\n      dark = _ref.dark,\n      light = _ref.light,\n      color = _ref.color,\n      otherProps = _objectWithoutProperties(_ref, [\"themed\", \"fluid\", \"shadow\", \"className\", \"children\", \"dark\", \"light\", \"color\"]);\n\n  var navbarClass = classNames({\n    'navbar-themed': themed || !!color,\n    'navbar-shadow': shadow\n  }, 'navbar-multi-collapse', className); // When a combination of light or dark is present\n  // with a color - use a custom class instead of bootstrap's\n\n  if ((dark || light) && color) {\n    navbarClass = classNames(navbarClass, \"navbar-\".concat(light ? 'light' : '').concat(dark ? 'dark' : '', \"-\").concat(color));\n  }\n\n  return React.createElement(BSNavbar, _extends({\n    className: navbarClass\n    /*\n        Use the dark and light switches\n        only when color is not set\n    */\n    ,\n    dark: dark && !color,\n    light: light && !color\n  }, otherProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }), React.createElement(Container, {\n    className: \"navbar-collapse-wrap\",\n    fluid: fluid,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, children));\n};\n\nNavbar.propTypes = {\n  themed: PropTypes.bool,\n  fluid: PropTypes.bool,\n  shadow: PropTypes.bool,\n  className: PropTypes.string,\n  children: PropTypes.node,\n  color: PropTypes.string,\n  dark: PropTypes.bool,\n  light: PropTypes.bool\n};\nNavbar.defaultProps = {\n  fluid: false,\n  themed: false\n};\nexport { Navbar };","map":{"version":3,"sources":["/Users/crocslut/Desktop/Git/zpc/components/Navbar/navbar.js"],"names":["React","classNames","PropTypes","Navbar","BSNavbar","Container","themed","fluid","shadow","className","children","dark","light","color","otherProps","navbarClass","propTypes","bool","string","node","defaultProps"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,MAAM,IAAIC,QAAnB,EAA6BC,SAA7B,QAA8C,YAA9C;;AAEA,IAAMF,MAAM,GAAG,SAATA,MAAS,OAUT;AAAA,MATFG,MASE,QATFA,MASE;AAAA,MARFC,KAQE,QARFA,KAQE;AAAA,MAPFC,MAOE,QAPFA,MAOE;AAAA,MANFC,SAME,QANFA,SAME;AAAA,MALFC,QAKE,QALFA,QAKE;AAAA,MAJFC,IAIE,QAJFA,IAIE;AAAA,MAHFC,KAGE,QAHFA,KAGE;AAAA,MAFFC,KAEE,QAFFA,KAEE;AAAA,MADCC,UACD;;AACF,MAAIC,WAAW,GAAGd,UAAU,CAAC;AACzB,qBAAiBK,MAAM,IAAI,CAAC,CAACO,KADJ;AAEzB,qBAAiBL;AAFQ,GAAD,EAGzB,uBAHyB,EAGAC,SAHA,CAA5B,CADE,CAMF;AACA;;AACA,MAAI,CAACE,IAAI,IAAIC,KAAT,KAAmBC,KAAvB,EAA8B;AAC1BE,IAAAA,WAAW,GAAGd,UAAU,CAACc,WAAD,mBACVH,KAAK,GAAG,OAAH,GAAa,EADR,SACcD,IAAI,GAAG,MAAH,GAAY,EAD9B,cACoCE,KADpC,EAAxB;AAEH;;AAED,SACI,oBAAC,QAAD;AACI,IAAA,SAAS,EAAGE;AACZ;;;;AAFJ;AAMI,IAAA,IAAI,EAAGJ,IAAI,IAAI,CAACE,KANpB;AAOI,IAAA,KAAK,EAAGD,KAAK,IAAI,CAACC;AAPtB,KAQSC,UART;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAWQ,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAC,sBAArB;AAA4C,IAAA,KAAK,EAAGP,KAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACMG,QADN,CAXR,CADJ;AAkBH,CAzCD;;AA0CAP,MAAM,CAACa,SAAP,GAAmB;AACfV,EAAAA,MAAM,EAAEJ,SAAS,CAACe,IADH;AAEfV,EAAAA,KAAK,EAAEL,SAAS,CAACe,IAFF;AAGfT,EAAAA,MAAM,EAAEN,SAAS,CAACe,IAHH;AAIfR,EAAAA,SAAS,EAAEP,SAAS,CAACgB,MAJN;AAKfR,EAAAA,QAAQ,EAAER,SAAS,CAACiB,IALL;AAMfN,EAAAA,KAAK,EAAEX,SAAS,CAACgB,MANF;AAOfP,EAAAA,IAAI,EAAET,SAAS,CAACe,IAPD;AAQfL,EAAAA,KAAK,EAAEV,SAAS,CAACe;AARF,CAAnB;AAUAd,MAAM,CAACiB,YAAP,GAAsB;AAClBb,EAAAA,KAAK,EAAE,KADW;AAElBD,EAAAA,MAAM,EAAE;AAFU,CAAtB;AAKA,SAASH,MAAT","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { Navbar as BSNavbar, Container } from 'reactstrap';\n\nconst Navbar = ({\n    themed,\n    fluid,\n    shadow,\n    className,\n    children,\n    dark,\n    light,\n    color,\n    ...otherProps\n}) => {\n    let navbarClass = classNames({\n        'navbar-themed': themed || !!color,\n        'navbar-shadow': shadow,\n    }, 'navbar-multi-collapse', className);\n\n    // When a combination of light or dark is present\n    // with a color - use a custom class instead of bootstrap's\n    if ((dark || light) && color) {\n        navbarClass = classNames(navbarClass,\n            `navbar-${light ? 'light' : '' }${dark ? 'dark' : ''}-${color}`);\n    }\n\n    return (\n        <BSNavbar\n            className={ navbarClass }\n            /*\n                Use the dark and light switches\n                only when color is not set\n            */\n            dark={ dark && !color }\n            light={ light && !color }\n            { ...otherProps }\n        >\n            {\n                <Container className=\"navbar-collapse-wrap\" fluid={ fluid }>\n                    { children }\n                </Container>\n            }\n        </BSNavbar>\n    )\n};\nNavbar.propTypes = {\n    themed: PropTypes.bool,\n    fluid: PropTypes.bool,\n    shadow: PropTypes.bool,\n    className: PropTypes.string,\n    children: PropTypes.node,\n    color: PropTypes.string,\n    dark: PropTypes.bool,\n    light: PropTypes.bool\n}\nNavbar.defaultProps = {\n    fluid: false,\n    themed: false,\n}\n\nexport { Navbar };\n"]},"metadata":{},"sourceType":"module"}