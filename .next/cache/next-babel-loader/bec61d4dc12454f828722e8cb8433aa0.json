{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/crocslut/Desktop/Git/zpc/components/Theme/ThemeProvider.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Provider } from './ThemeContext';\nexport var ThemeProvider =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ThemeProvider, _React$Component);\n\n  function ThemeProvider(props) {\n    var _this;\n\n    _classCallCheck(this, ThemeProvider);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ThemeProvider).call(this, props));\n    _this.state = {\n      style: 'light',\n      color: 'primary'\n    };\n    return _this;\n  }\n\n  _createClass(ThemeProvider, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          initialStyle = _this$props.initialStyle,\n          initialColor = _this$props.initialColor;\n\n      if (initialStyle) {\n        this.setState({\n          style: initialStyle\n        });\n      }\n\n      if (initialColor) {\n        this.setState({\n          color: initialColor\n        });\n      }\n    }\n  }, {\n    key: \"onChangeTheme\",\n    value: function onChangeTheme(themeState) {\n      this.setState(themeState);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var children = this.props.children;\n      return React.createElement(Provider, {\n        value: _objectSpread({}, this.state, {\n          onChangeTheme: this.onChangeTheme.bind(this)\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, children);\n    }\n  }]);\n\n  return ThemeProvider;\n}(React.Component);\n\n_defineProperty(ThemeProvider, \"propTypes\", {\n  children: PropTypes.node,\n  initialStyle: PropTypes.string,\n  initialColor: PropTypes.string\n});","map":{"version":3,"sources":["/Users/crocslut/Desktop/Git/zpc/components/Theme/ThemeProvider.js"],"names":["React","PropTypes","Provider","ThemeProvider","props","state","style","color","initialStyle","initialColor","setState","themeState","children","onChangeTheme","bind","Component","node","string"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAASC,QAAT,QAAyB,gBAAzB;AAEA,WAAaC,aAAb;AAAA;AAAA;AAAA;;AAOI,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,uFAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE,OADE;AAETC,MAAAA,KAAK,EAAE;AAFE,KAAb;AAHe;AAOlB;;AAdL;AAAA;AAAA,wCAgBwB;AAAA,wBACuB,KAAKH,KAD5B;AAAA,UACRI,YADQ,eACRA,YADQ;AAAA,UACMC,YADN,eACMA,YADN;;AAGhB,UAAID,YAAJ,EAAkB;AACd,aAAKE,QAAL,CAAc;AAAEJ,UAAAA,KAAK,EAAEE;AAAT,SAAd;AACH;;AACD,UAAIC,YAAJ,EAAkB;AACd,aAAKC,QAAL,CAAc;AAAEH,UAAAA,KAAK,EAAEE;AAAT,SAAd;AACH;AACJ;AAzBL;AAAA;AAAA,kCA2BkBE,UA3BlB,EA2B8B;AACtB,WAAKD,QAAL,CAAcC,UAAd;AACH;AA7BL;AAAA;AAAA,6BA+Ba;AAAA,UACGC,QADH,GACgB,KAAKR,KADrB,CACGQ,QADH;AAGL,aACI,oBAAC,QAAD;AACI,QAAA,KAAK,oBACE,KAAKP,KADP;AAEDQ,UAAAA,aAAa,EAAE,KAAKA,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB;AAFd,UADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAMMF,QANN,CADJ;AAUH;AA5CL;;AAAA;AAAA,EAAmCZ,KAAK,CAACe,SAAzC;;gBAAaZ,a,eACU;AACfS,EAAAA,QAAQ,EAAEX,SAAS,CAACe,IADL;AAEfR,EAAAA,YAAY,EAAEP,SAAS,CAACgB,MAFT;AAGfR,EAAAA,YAAY,EAAER,SAAS,CAACgB;AAHT,C","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Provider } from './ThemeContext';\n\nexport class ThemeProvider extends React.Component {\n    static propTypes = {\n        children: PropTypes.node,\n        initialStyle: PropTypes.string,\n        initialColor: PropTypes.string,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            style: 'light',\n            color: 'primary',\n        };\n    }\n\n    componentDidMount() {\n        const { initialStyle, initialColor } = this.props;\n\n        if (initialStyle) {\n            this.setState({ style: initialStyle });\n        }\n        if (initialColor) {\n            this.setState({ color: initialColor });\n        }\n    }\n\n    onChangeTheme(themeState) {\n        this.setState(themeState);\n    }\n    \n    render() {\n        const { children } = this.props;\n        \n        return (\n            <Provider\n                value={{\n                    ...this.state,\n                    onChangeTheme: this.onChangeTheme.bind(this)\n                }}\n            >\n                { children }\n            </Provider>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}