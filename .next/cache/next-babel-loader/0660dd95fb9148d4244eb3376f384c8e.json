{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/crocslut/Desktop/Git/zpc/components/Theme/ThemeSelector.js\";\nimport React from 'react';\nimport _ from 'lodash';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { Card, CardBody, Button, FormGroup, CustomInput } from 'reactstrap';\nimport './../../styles/components/theme-selector.scss';\nimport { Consumer } from './ThemeContext';\n\nvar ThemeSelector =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ThemeSelector, _React$Component);\n\n  function ThemeSelector(props) {\n    var _this;\n\n    _classCallCheck(this, ThemeSelector);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ThemeSelector).call(this, props));\n    _this.state = {\n      isActive: false,\n      initialStyle: '',\n      initialColor: ''\n    };\n    return _this;\n  }\n\n  _createClass(ThemeSelector, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        initialColor: this.props.color,\n        initialStyle: this.props.style\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var rootClass = classNames('theme-config', {\n        'theme-config--active': this.state.isActive\n      });\n      return React.createElement(\"div\", {\n        className: rootClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"primary\",\n        className: \"theme-config__trigger\",\n        onClick: function onClick() {\n          _this2.setState({\n            isActive: !_this2.state.isActive\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fa fa-paint-brush fa-fw\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      })), React.createElement(Card, {\n        className: \"theme-config__body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(\"h6\", {\n        className: \"text-center mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, \"Configurator\"), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"h6 small mb-2 d-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, \"Nav Color\"), _.map(this.props.colorOptions, function (option, index) {\n        return React.createElement(CustomInput, {\n          key: index,\n          type: \"radio\",\n          name: \"sidebarColor\",\n          id: \"sidebarStyle--\".concat(option.value),\n          value: option.value,\n          checked: _this2.props.color === option.value,\n          onChange: function onChange(ev) {\n            if (ev.target.checked) {\n              _this2.props.onChangeTheme({\n                color: option.value\n              });\n            }\n          },\n          label: React.createElement(\"span\", {\n            className: \"d-flex align-items-center\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 102\n            },\n            __self: this\n          }, option.name, React.createElement(\"i\", {\n            className: \"fa fa-circle ml-auto text-\".concat(option.value),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 104\n            },\n            __self: this\n          })),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        });\n      })), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"h6 small mb-2 d-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, \"Nav Style\"), _.map(this.props.styleOptions, function (option, index) {\n        return React.createElement(CustomInput, {\n          key: index,\n          type: \"radio\",\n          name: \"sidebarStyle\",\n          id: \"sidebarStyle--\".concat(option.value),\n          value: option.value,\n          disabled: _this2.props.styleDisabled,\n          checked: _this2.props.style === option.value,\n          onChange: function onChange(ev) {\n            if (ev.target.checked) {\n              _this2.props.onChangeTheme({\n                style: option.value\n              });\n            }\n          },\n          label: option.name,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          },\n          __self: this\n        });\n      })), React.createElement(FormGroup, {\n        className: \"mb-0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"secondary\",\n        outline: true,\n        className: \"d-block w-100\",\n        onClick: function onClick() {\n          _this2.props.onChangeTheme({\n            color: _this2.state.initialColor,\n            style: _this2.state.initialStyle\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, \"Reset Options\")))));\n    }\n  }]);\n\n  return ThemeSelector;\n}(React.Component);\n\n_defineProperty(ThemeSelector, \"propTypes\", {\n  style: PropTypes.string.isRequired,\n  color: PropTypes.string.isRequired,\n  styleOptions: PropTypes.array,\n  styleDisabled: PropTypes.bool,\n  colorOptions: PropTypes.array,\n  onChangeTheme: PropTypes.func\n});\n\n_defineProperty(ThemeSelector, \"defaultProps\", {\n  styleOptions: [{\n    name: 'Light',\n    value: 'light'\n  }, {\n    name: 'Dark',\n    value: 'dark'\n  }, {\n    name: 'Color',\n    value: 'color'\n  }],\n  colorOptions: [{\n    name: 'Primary',\n    value: 'primary'\n  }, {\n    name: 'Success',\n    value: 'success'\n  }, {\n    name: 'Info',\n    value: 'info'\n  }, {\n    name: 'Danger',\n    value: 'danger'\n  }, {\n    name: 'Warning',\n    value: 'warning'\n  }, {\n    name: 'Indigo',\n    value: 'indigo'\n  }, {\n    name: 'Purple',\n    value: 'purple'\n  }, {\n    name: 'Pink',\n    value: 'pink'\n  }, {\n    name: 'Yellow',\n    value: 'yellow'\n  }]\n});\n\nvar ContextThemeSelector = function ContextThemeSelector(props) {\n  return React.createElement(Consumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, function (themeState) {\n    return React.createElement(ThemeSelector, _extends({}, themeState, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }));\n  });\n};\n\nexport { ContextThemeSelector as ThemeSelector };","map":{"version":3,"sources":["/Users/crocslut/Desktop/Git/zpc/components/Theme/ThemeSelector.js"],"names":["React","_","classNames","PropTypes","Card","CardBody","Button","FormGroup","CustomInput","Consumer","ThemeSelector","props","state","isActive","initialStyle","initialColor","setState","color","style","rootClass","map","colorOptions","option","index","value","ev","target","checked","onChangeTheme","name","styleOptions","styleDisabled","Component","string","isRequired","array","bool","func","ContextThemeSelector","themeState"],"mappings":"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","sourcesContent":["import React from 'react';\nimport _ from 'lodash';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport {\n    Card,\n    CardBody,\n    Button,\n    FormGroup,\n    CustomInput\n} from 'reactstrap';\n\nimport './../../styles/components/theme-selector.scss';\nimport { Consumer } from './ThemeContext';\n\nclass ThemeSelector extends React.Component {\n    static propTypes = {\n        style: PropTypes.string.isRequired,\n        color: PropTypes.string.isRequired,\n        styleOptions: PropTypes.array,\n        styleDisabled: PropTypes.bool,\n        colorOptions: PropTypes.array,\n        onChangeTheme: PropTypes.func,\n    };\n    static defaultProps = {\n        styleOptions: [\n            { name: 'Light', value: 'light' },\n            { name: 'Dark', value: 'dark' },\n            { name: 'Color', value: 'color' }\n        ],\n        colorOptions: [\n            { name: 'Primary', value: 'primary' },\n            { name: 'Success', value: 'success' },\n            { name: 'Info', value: 'info' },\n            { name: 'Danger', value: 'danger' },\n            { name: 'Warning', value: 'warning' },\n            { name: 'Indigo', value: 'indigo' },\n            { name: 'Purple', value: 'purple' },\n            { name: 'Pink', value: 'pink' },\n            { name: 'Yellow', value: 'yellow' }\n        ]\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isActive: false,\n            initialStyle: '',\n            initialColor: '',\n        };\n    }\n\n    componentDidMount() {\n        this.setState({\n            initialColor: this.props.color,\n            initialStyle: this.props.style\n        });\n    }\n\n    render() {\n        const rootClass = classNames('theme-config', {\n            'theme-config--active': this.state.isActive,\n        });\n\n        return (\n            <div className={ rootClass }>\n                <Button\n                    color=\"primary\"\n                    className=\"theme-config__trigger\"\n                    onClick={() => { this.setState({isActive: !this.state.isActive}) }}\n                >\n                    <i className=\"fa fa-paint-brush fa-fw\"></i>\n                </Button>\n                <Card className=\"theme-config__body\">\n                    <CardBody>\n                        <h6 className=\"text-center mb-3\">\n                            Configurator\n                        </h6>\n\n                        <FormGroup>\n                            <span className=\"h6 small mb-2 d-block\">\n                                Nav Color\n                            </span>\n                            {\n                                _.map(this.props.colorOptions, (option, index) => (\n                                        <CustomInput\n                                            key={ index }\n                                            type=\"radio\"\n                                            name=\"sidebarColor\"\n                                            id={ `sidebarStyle--${option.value}` }\n                                            value={ option.value }\n                                            checked={ this.props.color === option.value }\n                                            onChange={(ev) => {\n                                                if (ev.target.checked) {\n                                                    this.props.onChangeTheme({\n                                                        color: option.value\n                                                    });\n                                                }\n                                            }}\n                                            label={(\n                                                <span className=\"d-flex align-items-center\">\n                                                    { option.name }\n                                                    <i className={`fa fa-circle ml-auto text-${option.value}`} />\n                                                </span>\n                                            )}\n                                        />\n                                ))\n                            }\n                        </FormGroup>\n                        <FormGroup>\n                            <span className=\"h6 small mb-2 d-block\">\n                                Nav Style\n                            </span>\n                            {\n                                _.map(this.props.styleOptions, (option, index) => (\n                                    <CustomInput\n                                        key={ index }\n                                        type=\"radio\"\n                                        name=\"sidebarStyle\"\n                                        id={ `sidebarStyle--${option.value}` }\n                                        value={ option.value }\n                                        disabled={ this.props.styleDisabled }\n                                        checked={ this.props.style === option.value }\n                                        onChange={(ev) => {\n                                            if (ev.target.checked) {\n                                                this.props.onChangeTheme({\n                                                    style: option.value\n                                                });\n                                            }\n                                        }}\n                                        label={ option.name }\n                                    />\n                                ))\n                            }\n                        </FormGroup>\n                        <FormGroup className=\"mb-0\">\n                            <Button\n                                color=\"secondary\"\n                                outline\n                                className=\"d-block w-100\"\n                                onClick={() => {\n                                    this.props.onChangeTheme({\n                                        color: this.state.initialColor,\n                                        style: this.state.initialStyle\n                                    });\n                                }}\n                            >\n                                Reset Options\n                            </Button>\n                        </FormGroup>\n                    </CardBody>\n                </Card>\n            </div>\n        );\n    }\n}\n\nconst ContextThemeSelector = (props) =>\n    <Consumer>\n        {\n            (themeState) => <ThemeSelector { ...themeState } { ...props } />\n        }\n    </Consumer>\n\nexport { ContextThemeSelector as ThemeSelector };\n\n"]},"metadata":{},"sourceType":"module"}