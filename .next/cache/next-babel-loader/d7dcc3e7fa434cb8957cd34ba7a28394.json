{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/crocslut/Desktop/Git/zpc/components/UncontrolledPopover/UncontrolledPopover.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { Popover } from 'reactstrap';\n\nvar UncontrollerPopover =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(UncontrollerPopover, _React$Component);\n\n  function UncontrollerPopover(props) {\n    var _this;\n\n    _classCallCheck(this, UncontrollerPopover);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(UncontrollerPopover).call(this, props));\n    _this.state = {\n      isOpen: false\n    };\n    return _this;\n  }\n\n  _createClass(UncontrollerPopover, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var target = this.props.target;\n\n      if (typeof document !== 'undefined') {\n        this.triggerElement = document.querySelector(\"#\".concat(target));\n\n        if (!this.triggerElement) {\n          // eslint-disable-next-line no-console\n          console.error('UncontrolledPopover: \\'target\\' element has not been found in the DOM via querySelector');\n          return;\n        }\n\n        this.triggerElement.addEventListener('click', this.clickEventHandler.bind(this));\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.props.activateTrigger && this.triggerElement) {\n        var activeClassName = this.props.activeClassName;\n        this.triggerElement.classList.toggle(activeClassName, this.state.isOpen);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.triggerElement) {\n        this.triggerElement.removeEventListener('click', this.clickEventHandler);\n      }\n    }\n  }, {\n    key: \"clickEventHandler\",\n    value: function clickEventHandler() {\n      this.setState({\n        isOpen: !this.state.isOpen\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Popover, _extends({}, _.omit(this.props, ['activateTrigger', 'activeClassName']), {\n        isOpen: this.state.isOpen,\n        toggle: function toggle() {\n          _this2.setState({\n            isOpen: !_this2.state.isOpen\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }), this.props.children);\n    }\n  }]);\n\n  return UncontrollerPopover;\n}(React.Component);\n\nUncontrollerPopover.propTypes = {\n  activateTrigger: PropTypes.bool,\n  activeClassName: PropTypes.string\n};\nUncontrollerPopover.defaultProps = {\n  activateTrigger: true,\n  activeClassName: 'active'\n};\nexport { UncontrollerPopover };","map":{"version":3,"sources":["/Users/crocslut/Desktop/Git/zpc/components/UncontrolledPopover/UncontrolledPopover.js"],"names":["React","PropTypes","_","Popover","UncontrollerPopover","props","state","isOpen","target","document","triggerElement","querySelector","console","error","addEventListener","clickEventHandler","bind","activateTrigger","activeClassName","classList","toggle","removeEventListener","setState","omit","children","Component","propTypes","bool","string","defaultProps"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,SACIC,OADJ,QAEO,YAFP;;IAIMC,mB;;;;;AACF,+BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,6FAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACTC,MAAAA,MAAM,EAAE;AADC,KAAb;AAHe;AAMlB;;;;wCAEmB;AAAA,UACRC,MADQ,GACG,KAAKH,KADR,CACRG,MADQ;;AAGhB,UAAI,OAAOC,QAAP,KAAoB,WAAxB,EAAqC;AACjC,aAAKC,cAAL,GAAsBD,QAAQ,CAACE,aAAT,YAA2BH,MAA3B,EAAtB;;AAEA,YAAI,CAAC,KAAKE,cAAV,EAA0B;AACtB;AACAE,UAAAA,OAAO,CAACC,KAAR,CAAc,yFAAd;AACA;AACH;;AAED,aAAKH,cAAL,CAAoBI,gBAApB,CAAqC,OAArC,EAA8C,KAAKC,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAA9C;AACH;AACJ;;;yCAEoB;AACjB,UAAI,KAAKX,KAAL,CAAWY,eAAX,IAA8B,KAAKP,cAAvC,EAAuD;AAAA,YAC3CQ,eAD2C,GACvB,KAAKb,KADkB,CAC3Ca,eAD2C;AAEnD,aAAKR,cAAL,CAAoBS,SAApB,CAA8BC,MAA9B,CAAqCF,eAArC,EAAsD,KAAKZ,KAAL,CAAWC,MAAjE;AACH;AACJ;;;2CAEsB;AACnB,UAAI,KAAKG,cAAT,EAAyB;AACrB,aAAKA,cAAL,CAAoBW,mBAApB,CAAwC,OAAxC,EAAiD,KAAKN,iBAAtD;AACH;AACJ;;;wCAEmB;AAChB,WAAKO,QAAL,CAAc;AAAEf,QAAAA,MAAM,EAAE,CAAC,KAAKD,KAAL,CAAWC;AAAtB,OAAd;AACH;;;6BAEQ;AAAA;;AACL,aACI,oBAAC,OAAD,eACSL,CAAC,CAACqB,IAAF,CAAO,KAAKlB,KAAZ,EAAmB,CAAC,iBAAD,EAAoB,iBAApB,CAAnB,CADT;AAEI,QAAA,MAAM,EAAG,KAAKC,KAAL,CAAWC,MAFxB;AAGI,QAAA,MAAM,EAAG,kBAAM;AAAE,UAAA,MAAI,CAACe,QAAL,CAAc;AAAEf,YAAAA,MAAM,EAAE,CAAC,MAAI,CAACD,KAAL,CAAWC;AAAtB,WAAd;AAA+C,SAHpE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAKM,KAAKF,KAAL,CAAWmB,QALjB,CADJ;AASH;;;;EApD6BxB,KAAK,CAACyB,S;;AAsDxCrB,mBAAmB,CAACsB,SAApB,GAAgC;AAC5BT,EAAAA,eAAe,EAAEhB,SAAS,CAAC0B,IADC;AAE5BT,EAAAA,eAAe,EAAEjB,SAAS,CAAC2B;AAFC,CAAhC;AAIAxB,mBAAmB,CAACyB,YAApB,GAAmC;AAC/BZ,EAAAA,eAAe,EAAE,IADc;AAE/BC,EAAAA,eAAe,EAAE;AAFc,CAAnC;AAKA,SAASd,mBAAT","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport {\n    Popover\n} from 'reactstrap';\n\nclass UncontrollerPopover extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isOpen: false\n        };\n    }\n\n    componentDidMount() {\n        const { target } = this.props;\n\n        if (typeof document !== 'undefined') {\n            this.triggerElement = document.querySelector(`#${target}`);\n\n            if (!this.triggerElement) {\n                // eslint-disable-next-line no-console\n                console.error('UncontrolledPopover: \\'target\\' element has not been found in the DOM via querySelector');\n                return;\n            }\n\n            this.triggerElement.addEventListener('click', this.clickEventHandler.bind(this));\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.props.activateTrigger && this.triggerElement) {\n            const { activeClassName } = this.props;\n            this.triggerElement.classList.toggle(activeClassName, this.state.isOpen);\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.triggerElement) {\n            this.triggerElement.removeEventListener('click', this.clickEventHandler);\n        }\n    }\n\n    clickEventHandler() {\n        this.setState({ isOpen: !this.state.isOpen });\n    }\n\n    render() {\n        return (\n            <Popover\n                { ..._.omit(this.props, ['activateTrigger', 'activeClassName']) }\n                isOpen={ this.state.isOpen }\n                toggle={ () => { this.setState({ isOpen: !this.state.isOpen }) } }\n            >\n                { this.props.children }\n            </Popover>\n        )\n    }\n}\nUncontrollerPopover.propTypes = {\n    activateTrigger: PropTypes.bool,\n    activeClassName: PropTypes.string\n};\nUncontrollerPopover.defaultProps = {\n    activateTrigger: true,\n    activeClassName: 'active'\n};\n\nexport { UncontrollerPopover };\n"]},"metadata":{},"sourceType":"module"}