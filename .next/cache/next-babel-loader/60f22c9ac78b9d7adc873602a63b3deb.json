{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/crocslut/Desktop/Git/zpc/components/Accordion/Accordion.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Card from './../Card';\nimport { Provider } from './context';\nexport var Accordion =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Accordion, _React$Component);\n\n  function Accordion(props) {\n    var _this;\n\n    _classCallCheck(this, Accordion);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Accordion).call(this, props));\n    _this.state = {\n      isOpen: props.initialOpen\n    };\n\n    if (props.open !== 'undefined' && props.onToggle === 'undefined') {\n      throw \"Accordion: props.open has to be used combined with props.onToggle \" + \"use props.initialOpen to create an uncontrolled Accordion.\";\n    }\n\n    return _this;\n  }\n\n  _createClass(Accordion, [{\n    key: \"toggleHandler\",\n    value: function toggleHandler() {\n      var onToggle = this.props.onToggle;\n\n      if (!onToggle) {\n        this.setState({\n          isOpen: !this.state.isOpen\n        });\n      } else {\n        this.onToggle(!this.props.open);\n      }\n    }\n  }, {\n    key: \"isOpen\",\n    value: function isOpen() {\n      return !this.props.onToggle ? this.state.isOpen : this.props.open;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      /* eslint-disable-next-line no-unused-vars */\n      var _this$props = this.props,\n          className = _this$props.className,\n          children = _this$props.children,\n          initialOpen = _this$props.initialOpen,\n          otherProps = _objectWithoutProperties(_this$props, [\"className\", \"children\", \"initialOpen\"]);\n\n      return React.createElement(Provider, {\n        value: {\n          onToggle: this.toggleHandler.bind(this),\n          isOpen: this.isOpen()\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(Card, _extends({\n        className: className\n      }, otherProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }), children));\n    }\n  }]);\n\n  return Accordion;\n}(React.Component);\n\n_defineProperty(Accordion, \"propTypes\", {\n  initialOpen: PropTypes.bool,\n  onToggle: PropTypes.func,\n  open: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string\n});","map":{"version":3,"sources":["/Users/crocslut/Desktop/Git/zpc/components/Accordion/Accordion.js"],"names":["React","PropTypes","Card","Provider","Accordion","props","state","isOpen","initialOpen","open","onToggle","setState","className","children","otherProps","toggleHandler","bind","Component","bool","func","node","string"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,SAASC,QAAT,QAAyB,WAAzB;AAEA,WAAaC,SAAb;AAAA;AAAA;AAAA;;AASI,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,mFAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACTC,MAAAA,MAAM,EAAEF,KAAK,CAACG;AADL,KAAb;;AAIA,QAAIH,KAAK,CAACI,IAAN,KAAe,WAAf,IAA8BJ,KAAK,CAACK,QAAN,KAAmB,WAArD,EAAkE;AAC9D,YAAM,uEACF,4DADJ;AAEH;;AAVc;AAWlB;;AApBL;AAAA;AAAA,oCAsBoB;AAAA,UACJA,QADI,GACS,KAAKL,KADd,CACJK,QADI;;AAGZ,UAAI,CAACA,QAAL,EAAe;AACX,aAAKC,QAAL,CAAc;AAAEJ,UAAAA,MAAM,EAAE,CAAC,KAAKD,KAAL,CAAWC;AAAtB,SAAd;AACH,OAFD,MAEO;AACH,aAAKG,QAAL,CAAc,CAAC,KAAKL,KAAL,CAAWI,IAA1B;AACH;AACJ;AA9BL;AAAA;AAAA,6BAgCa;AACL,aAAO,CAAC,KAAKJ,KAAL,CAAWK,QAAZ,GACH,KAAKJ,KAAL,CAAWC,MADR,GACiB,KAAKF,KAAL,CAAWI,IADnC;AAEH;AAnCL;AAAA;AAAA,6BAqCa;AACL;AADK,wBAEuD,KAAKJ,KAF5D;AAAA,UAEGO,SAFH,eAEGA,SAFH;AAAA,UAEcC,QAFd,eAEcA,QAFd;AAAA,UAEwBL,WAFxB,eAEwBA,WAFxB;AAAA,UAEwCM,UAFxC;;AAIL,aACI,oBAAC,QAAD;AACI,QAAA,KAAK,EAAE;AACHJ,UAAAA,QAAQ,EAAE,KAAKK,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CADP;AAEHT,UAAAA,MAAM,EAAE,KAAKA,MAAL;AAFL,SADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAMI,oBAAC,IAAD;AAAM,QAAA,SAAS,EAAGK;AAAlB,SAAmCE,UAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UACMD,QADN,CANJ,CADJ;AAYH;AArDL;;AAAA;AAAA,EAA+Bb,KAAK,CAACiB,SAArC;;gBAAab,S,eACU;AACfI,EAAAA,WAAW,EAAEP,SAAS,CAACiB,IADR;AAEfR,EAAAA,QAAQ,EAAET,SAAS,CAACkB,IAFL;AAGfV,EAAAA,IAAI,EAAER,SAAS,CAACiB,IAHD;AAIfL,EAAAA,QAAQ,EAAEZ,SAAS,CAACmB,IAJL;AAKfR,EAAAA,SAAS,EAAEX,SAAS,CAACoB;AALN,C","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Card from './../Card';\n\nimport { Provider } from './context';\n\nexport class Accordion extends React.Component {\n    static propTypes = {\n        initialOpen: PropTypes.bool,\n        onToggle: PropTypes.func,\n        open: PropTypes.bool,\n        children: PropTypes.node,\n        className: PropTypes.string\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isOpen: props.initialOpen\n        }\n\n        if (props.open !== 'undefined' && props.onToggle === 'undefined') {\n            throw \"Accordion: props.open has to be used combined with props.onToggle \" +\n                \"use props.initialOpen to create an uncontrolled Accordion.\"\n        }\n    }\n\n    toggleHandler() {\n        const { onToggle } = this.props;\n\n        if (!onToggle) {\n            this.setState({ isOpen: !this.state.isOpen });\n        } else {\n            this.onToggle(!this.props.open);\n        }\n    }\n\n    isOpen() {\n        return !this.props.onToggle ?\n            this.state.isOpen : this.props.open;\n    }\n\n    render() {\n        /* eslint-disable-next-line no-unused-vars */\n        const { className, children, initialOpen, ...otherProps } = this.props;\n\n        return (\n            <Provider\n                value={{\n                    onToggle: this.toggleHandler.bind(this),\n                    isOpen: this.isOpen()\n                }}\n            >\n                <Card className={ className } { ...otherProps }>\n                    { children }\n                </Card>\n            </Provider>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}