{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/crocslut/Desktop/Git/zpc/components/UncontrolledModal/UncontrolledModal.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { Modal } from 'reactstrap';\nimport { Provider } from './context';\n\nvar UncontrolledModal =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(UncontrolledModal, _React$Component);\n\n  function UncontrolledModal(props) {\n    var _this;\n\n    _classCallCheck(this, UncontrolledModal);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(UncontrolledModal).call(this, props));\n    _this.state = {\n      isOpen: false\n    };\n    _this.boundClickEventHandler = _this.clickEventHandler.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(UncontrolledModal, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (typeof document !== 'undefined') {\n        this.triggerElement = document.querySelector(\"#\".concat(this.props.target));\n\n        if (!this.triggerElement) {\n          // eslint-disable-next-line no-console\n          console.error('UncontrolledModal: \\'target\\' element has not been found in the DOM via querySelector');\n          return;\n        }\n\n        this.triggerElement.addEventListener('click', this.boundClickEventHandler);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.triggerElement) {\n        this.triggerElement.removeEventListener('click', this.boundClickEventHandler);\n      }\n    }\n  }, {\n    key: \"clickEventHandler\",\n    value: function clickEventHandler() {\n      this.setState({\n        isOpen: true\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var modalProps = _.omit(this.props, ['target']);\n\n      var toggleModal = function toggleModal() {\n        _this2.setState({\n          isOpen: !_this2.state.isOpen\n        });\n      };\n\n      return React.createElement(Provider, {\n        value: {\n          toggleModal: toggleModal\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(Modal, _extends({}, modalProps, {\n        isOpen: this.state.isOpen,\n        toggle: toggleModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return UncontrolledModal;\n}(React.Component);\n\n_defineProperty(UncontrolledModal, \"propTypes\", {\n  target: PropTypes.string.isRequired\n});\n\nexport { UncontrolledModal };","map":{"version":3,"sources":["/Users/crocslut/Desktop/Git/zpc/components/UncontrolledModal/UncontrolledModal.js"],"names":["React","PropTypes","_","Modal","Provider","UncontrolledModal","props","state","isOpen","boundClickEventHandler","clickEventHandler","bind","document","triggerElement","querySelector","target","console","error","addEventListener","removeEventListener","setState","modalProps","omit","toggleModal","Component","string","isRequired"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,SAASC,KAAT,QAAsB,YAAtB;AAEA,SAASC,QAAT,QAAyB,WAAzB;;IAEMC,iB;;;;;AAKF,6BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,2FAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACTC,MAAAA,MAAM,EAAE;AADC,KAAb;AAIA,UAAKC,sBAAL,GAA8B,MAAKC,iBAAL,CAAuBC,IAAvB,+BAA9B;AAPe;AAQlB;;;;wCAEmB;AAChB,UAAI,OAAOC,QAAP,KAAoB,WAAxB,EAAqC;AACjC,aAAKC,cAAL,GAAsBD,QAAQ,CAACE,aAAT,YAA2B,KAAKR,KAAL,CAAWS,MAAtC,EAAtB;;AAEA,YAAI,CAAC,KAAKF,cAAV,EAA0B;AACtB;AACAG,UAAAA,OAAO,CAACC,KAAR,CAAc,uFAAd;AACA;AACH;;AAED,aAAKJ,cAAL,CAAoBK,gBAApB,CAAqC,OAArC,EAA8C,KAAKT,sBAAnD;AACH;AACJ;;;2CAEsB;AACnB,UAAI,KAAKI,cAAT,EAAyB;AACrB,aAAKA,cAAL,CAAoBM,mBAApB,CAAwC,OAAxC,EAAiD,KAAKV,sBAAtD;AACH;AACJ;;;wCAEmB;AAChB,WAAKW,QAAL,CAAc;AAAEZ,QAAAA,MAAM,EAAE;AAAV,OAAd;AACH;;;6BAEQ;AAAA;;AACL,UAAMa,UAAU,GAAGnB,CAAC,CAACoB,IAAF,CAAO,KAAKhB,KAAZ,EAAmB,CAAC,QAAD,CAAnB,CAAnB;;AACA,UAAMiB,WAAW,GAAG,SAAdA,WAAc,GAAM;AAAE,QAAA,MAAI,CAACH,QAAL,CAAc;AAAEZ,UAAAA,MAAM,EAAE,CAAC,MAAI,CAACD,KAAL,CAAWC;AAAtB,SAAd;AAA+C,OAA3E;;AAEA,aACI,oBAAC,QAAD;AAAU,QAAA,KAAK,EAAE;AAAEe,UAAAA,WAAW,EAAXA;AAAF,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD,eACSF,UADT;AAEI,QAAA,MAAM,EAAG,KAAKd,KAAL,CAAWC,MAFxB;AAGI,QAAA,MAAM,EAAGe,WAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADJ,CADJ;AASH;;;;EApD2BvB,KAAK,CAACwB,S;;gBAAhCnB,iB,eACiB;AACfU,EAAAA,MAAM,EAAEd,SAAS,CAACwB,MAAV,CAAiBC;AADV,C;;AAsDvB,SAASrB,iBAAT","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { Modal } from 'reactstrap';\n\nimport { Provider } from './context';\n\nclass UncontrolledModal extends React.Component {\n    static propTypes = {\n        target: PropTypes.string.isRequired\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isOpen: false\n        };\n\n        this.boundClickEventHandler = this.clickEventHandler.bind(this);\n    }\n\n    componentDidMount() {\n        if (typeof document !== 'undefined') {\n            this.triggerElement = document.querySelector(`#${this.props.target}`);\n\n            if (!this.triggerElement) {\n                // eslint-disable-next-line no-console\n                console.error('UncontrolledModal: \\'target\\' element has not been found in the DOM via querySelector');\n                return;\n            }\n\n            this.triggerElement.addEventListener('click', this.boundClickEventHandler);\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.triggerElement) {\n            this.triggerElement.removeEventListener('click', this.boundClickEventHandler);\n        }\n    }\n\n    clickEventHandler() {\n        this.setState({ isOpen: true });\n    }\n\n    render() {\n        const modalProps = _.omit(this.props, ['target']);\n        const toggleModal = () => { this.setState({ isOpen: !this.state.isOpen }) };\n\n        return (\n            <Provider value={{ toggleModal }}>\n                <Modal\n                    { ...modalProps }\n                    isOpen={ this.state.isOpen }\n                    toggle={ toggleModal }\n                />\n            </Provider>\n        );\n    }\n}\n\nexport { UncontrolledModal };\n"]},"metadata":{},"sourceType":"module"}