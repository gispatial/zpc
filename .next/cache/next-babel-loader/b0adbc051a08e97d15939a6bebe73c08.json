{"ast":null,"code":"var _jsxFileName = \"/Users/crocslut/Desktop/Git/zpc/components/NavbarThemeProvider/NavbarThemeProvider.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nvar NavbarThemeProvider = function NavbarThemeProvider(_ref) {\n  var style = _ref.style,\n      color = _ref.color,\n      children = _ref.children,\n      className = _ref.className;\n  var isSingleChild = React.Children.count(children) === 1;\n  var themeClass = \"navbar-\".concat(style, \"-\").concat(color);\n\n  if (isSingleChild) {\n    var child = React.Children.only(children);\n    return React.cloneElement(child, {\n      className: classNames(child.props.className, themeClass)\n    });\n  } else {\n    return React.createElement(\"div\", {\n      className: classNames(className, themeClass),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, children);\n  }\n};\n\nNavbarThemeProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n  style: PropTypes.string,\n  color: PropTypes.string\n};\nNavbarThemeProvider.defaultProps = {\n  style: 'light',\n  color: 'primary'\n};\nexport { NavbarThemeProvider };","map":{"version":3,"sources":["/Users/crocslut/Desktop/Git/zpc/components/NavbarThemeProvider/NavbarThemeProvider.js"],"names":["React","PropTypes","classNames","NavbarThemeProvider","style","color","children","className","isSingleChild","Children","count","themeClass","child","only","cloneElement","props","propTypes","node","isRequired","string","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB;;AAEA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,OAA2C;AAAA,MAAxCC,KAAwC,QAAxCA,KAAwC;AAAA,MAAjCC,KAAiC,QAAjCA,KAAiC;AAAA,MAA1BC,QAA0B,QAA1BA,QAA0B;AAAA,MAAhBC,SAAgB,QAAhBA,SAAgB;AACnE,MAAMC,aAAa,GAAGR,KAAK,CAACS,QAAN,CAAeC,KAAf,CAAqBJ,QAArB,MAAmC,CAAzD;AACA,MAAMK,UAAU,oBAAaP,KAAb,cAAsBC,KAAtB,CAAhB;;AAEA,MAAIG,aAAJ,EAAmB;AACf,QAAMI,KAAK,GAAGZ,KAAK,CAACS,QAAN,CAAeI,IAAf,CAAoBP,QAApB,CAAd;AAEA,WAAON,KAAK,CAACc,YAAN,CAAmBF,KAAnB,EAA0B;AAC7BL,MAAAA,SAAS,EAAEL,UAAU,CACjBU,KAAK,CAACG,KAAN,CAAYR,SADK,EAEjBI,UAFiB;AADQ,KAA1B,CAAP;AAMH,GATD,MASO;AACH,WACI;AAAK,MAAA,SAAS,EAAGT,UAAU,CAACK,SAAD,EAAYI,UAAZ,CAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACML,QADN,CADJ;AAKH;AACJ,CApBD;;AAqBAH,mBAAmB,CAACa,SAApB,GAAgC;AAC5BV,EAAAA,QAAQ,EAAEL,SAAS,CAACgB,IAAV,CAAeC,UADG;AAE5Bd,EAAAA,KAAK,EAAEH,SAAS,CAACkB,MAFW;AAG5Bd,EAAAA,KAAK,EAAEJ,SAAS,CAACkB;AAHW,CAAhC;AAKAhB,mBAAmB,CAACiB,YAApB,GAAmC;AAC/BhB,EAAAA,KAAK,EAAE,OADwB;AAE/BC,EAAAA,KAAK,EAAE;AAFwB,CAAnC;AAKA,SAASF,mBAAT","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst NavbarThemeProvider = ({ style, color, children, className }) => {\n    const isSingleChild = React.Children.count(children) === 1;\n    const themeClass = `navbar-${style}-${color}`;\n\n    if (isSingleChild) {\n        const child = React.Children.only(children);\n\n        return React.cloneElement(child, {\n            className: classNames(\n                child.props.className,\n                themeClass\n            ),\n        });\n    } else {\n        return (\n            <div className={ classNames(className, themeClass) }>\n                { children }\n            </div>\n        );\n    }\n};\nNavbarThemeProvider.propTypes = {\n    children: PropTypes.node.isRequired,\n    style: PropTypes.string,\n    color: PropTypes.string,\n};\nNavbarThemeProvider.defaultProps = {\n    style: 'light',\n    color: 'primary',\n};\n\nexport { NavbarThemeProvider };\n"]},"metadata":{},"sourceType":"module"}