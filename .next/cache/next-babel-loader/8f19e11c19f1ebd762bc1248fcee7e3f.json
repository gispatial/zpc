{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/crocslut/Desktop/Git/zpc/components/FloatGrid/Grid.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Container } from 'reactstrap';\nimport { FloatGridContext } from './floatGridContext';\nimport './../../styles/components/float-grid.scss';\nexport var Grid =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Grid, _React$Component);\n\n  function Grid() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Grid);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Grid)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      gridSize: {\n        w: 0,\n        h: 0\n      },\n      gridReady: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_gridRef\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"_resizeDebounceTimeout\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_resizeHandler\", function () {\n      clearInterval(_this._resizeDebounceTimeout);\n      _this._resizeDebounceTimeout = setTimeout(function () {\n        _this.setState({\n          gridSize: {\n            w: _this._gridRef.current.clientWidth,\n            h: _this._gridRef.current.clientHeight\n          }\n        });\n      }, 1000 / 60 * 10); //Every 10 frames debounce\n    });\n\n    return _this;\n  }\n\n  _createClass(Grid, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        gridSize: {\n          w: this._gridRef.current.clientWidth,\n          h: this._gridRef.current.clientHeight\n        }\n      });\n\n      if (typeof window !== 'undefined') {\n        window.addEventListener('resize', this._resizeHandler);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(nextProps) {\n      // HACK\n      if (typeof window !== 'undefined' && nextProps.fluid !== this.props.fluid) {\n        window.dispatchEvent(new Event('resize'));\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (typeof window !== 'undefined') {\n        window.removeEventListener('resize', this._resizeHandler);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          active = _this$props.active,\n          children = _this$props.children,\n          fluid = _this$props.fluid,\n          className = _this$props.className,\n          rowHeight = _this$props.rowHeight,\n          otherProps = _objectWithoutProperties(_this$props, [\"active\", \"children\", \"fluid\", \"className\", \"rowHeight\"]);\n\n      var gridSize = this.state.gridSize;\n      var modifiedChildren = React.Children.map(children, function (child) {\n        return React.cloneElement(child, _objectSpread({}, otherProps, {\n          active: active,\n          gridSize: gridSize\n        }));\n      });\n      var floatWrapClasses = classNames(_defineProperty({}, 'float-grid-parent__static', !fluid), className, 'float-grid-parent');\n      return React.createElement(FloatGridContext.Provider, {\n        value: {\n          gridUnitsToPx: function gridUnitsToPx(w, h) {\n            return {\n              wPx: w / 12 * gridSize.w,\n              hPx: h * rowHeight\n            };\n          },\n          active: active,\n          gridReady: this.state.gridReady,\n          setGridReady: function setGridReady() {\n            _this2.setState({\n              gridReady: true\n            });\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, active ? React.createElement(\"div\", {\n        className: floatWrapClasses,\n        ref: this._gridRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, modifiedChildren) : React.createElement(\"div\", {\n        ref: this._gridRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(Container, _extends({\n        fluid: fluid,\n        className: className\n      }, otherProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }), modifiedChildren)));\n    }\n  }]);\n\n  return Grid;\n}(React.Component);\n\n_defineProperty(Grid, \"propTypes\", {\n  active: PropTypes.bool,\n  children: PropTypes.node,\n  fluid: PropTypes.bool,\n  rowHeight: PropTypes.number,\n  className: PropTypes.string\n});\n\n_defineProperty(Grid, \"defaultProps\", {\n  active: true,\n  fluid: false,\n  rowHeight: 100\n});","map":{"version":3,"sources":["/Users/crocslut/Desktop/Git/zpc/components/FloatGrid/Grid.js"],"names":["React","PropTypes","classNames","Container","FloatGridContext","Grid","gridSize","w","h","gridReady","createRef","clearInterval","_resizeDebounceTimeout","setTimeout","setState","_gridRef","current","clientWidth","clientHeight","window","addEventListener","_resizeHandler","nextProps","fluid","props","dispatchEvent","Event","removeEventListener","active","children","className","rowHeight","otherProps","state","modifiedChildren","Children","map","child","cloneElement","floatWrapClasses","gridUnitsToPx","wPx","hPx","setGridReady","Component","bool","node","number","string"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport { Container } from 'reactstrap';\nimport { FloatGridContext } from './floatGridContext';\nimport './../../styles/components/float-grid.scss';\n\nexport class Grid extends React.Component {\n    static propTypes = {\n        active: PropTypes.bool,\n        children: PropTypes.node,\n        fluid: PropTypes.bool,\n        rowHeight: PropTypes.number,\n        className: PropTypes.string\n    }\n\n    static defaultProps = {\n        active: true,\n        fluid: false,\n        rowHeight: 100\n    }\n\n    state = {\n        gridSize: { w: 0, h: 0 },\n        gridReady: false,\n    }\n    _gridRef = React.createRef();\n    _resizeDebounceTimeout = 0;\n\n    componentDidMount() {\n        this.setState({\n            gridSize: {\n                w: this._gridRef.current.clientWidth,\n                h: this._gridRef.current.clientHeight\n            }\n        });\n\n        if (typeof window !== 'undefined') {\n            window.addEventListener('resize', this._resizeHandler);\n        }\n    }\n\n    componentDidUpdate(nextProps) {\n        // HACK\n        if (\n            typeof window !== 'undefined' &&\n            nextProps.fluid !== this.props.fluid\n        ) {\n            window.dispatchEvent(new Event('resize'));\n        }\n    }\n\n    componentWillUnmount() {\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('resize', this._resizeHandler);\n        }\n    }\n\n    render() {\n        const { active, children, fluid, className, rowHeight, ...otherProps } = this.props;\n        const { gridSize } = this.state;\n        const modifiedChildren = React.Children.map(children, child => (\n            React.cloneElement(child, {\n                ...otherProps,\n                active,\n                gridSize\n            })\n        ));\n\n        const floatWrapClasses = classNames({\n            ['float-grid-parent__static']: !fluid\n        }, className, 'float-grid-parent');\n\n        return(\n            <FloatGridContext.Provider\n                value={{\n                    gridUnitsToPx: (w, h) => {\n                        return {\n                            wPx: w / 12 * gridSize.w,\n                            hPx: h * rowHeight\n                        }\n                    },\n                    active,\n                    gridReady: this.state.gridReady,\n                    setGridReady: () => { this.setState({ gridReady: true }) }\n                }}\n            >\n                {\n                    active ? (\n                        <div\n                            className={ floatWrapClasses }\n                            ref={ this._gridRef }\n                        >\n                            { modifiedChildren }\n                        </div>\n                    ) : (\n                        <div ref={ this._gridRef }>\n                            <Container fluid={ fluid } className={ className } { ...otherProps }>\n                                { modifiedChildren }\n                            </Container>\n                        </div>\n                    )\n                }\n                \n            </FloatGridContext.Provider>\n        );\n    }\n\n    _resizeHandler = () => {\n        clearInterval(this._resizeDebounceTimeout);\n\n        this._resizeDebounceTimeout = setTimeout(() => {\n            this.setState({\n                gridSize: {\n                    w: this._gridRef.current.clientWidth,\n                    h: this._gridRef.current.clientHeight\n                }\n            });\n        }, 1000 / 60 * 10); //Every 10 frames debounce\n    }\n}\n"]},"metadata":{},"sourceType":"module"}