{"version":3,"sources":["node_modules/browser-pack/_prelude.js","assets/js/theme-config.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","layoutThemeFilter","index","className","match","join","findThemeClass","$layoutElement","output","attr","split","forEach","indexOf","parseClass","classParts","type","color","ThemeConfigMemento","saveTheme","layoutClass","window","sessionStorage","setItem","restoreTheme","themeClass","getItem","removeClass","addClass","themeConfig","trigger","ThemeConfig","$layout","$typeSwitches","$colorSwitches","$resetButton","this","initialStyleClass","_this","on","clearClass","updateCheckboxes","parsedClass","prototype","buildClass","currentThemeClass","currentThemeConfig","each","checked","value","startup","switchHandler","filter","val","bind","Dashboard","Object","assign"],"mappings":"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","file":"theme-config.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","\"use strict\";\n\n(function() {\n    var layoutThemeFilter = function(index, className) {\n        return (className.match (/(^|\\s)layout--theme--\\S+/g) || []).join(' ');\n    };\n\n    var findThemeClass = function($layoutElement) {\n        var output = null;\n        var classes = $layoutElement.attr('class').split(/\\s+/);\n        classes.forEach(function(className) {\n            if (className.indexOf('layout--theme--') >= 0) {\n                output = className;\n            }\n        });\n        return output;\n    };\n\n    var parseClass = function(className) {\n        var classParts = className.split('--');\n        \n        if ((classParts[0] !== 'layout' && classParts[1] !== 'theme') || classParts.length !== 4) {\n            throw \"ThemeConfig: Invalid class porvided to parser\";\n        }\n    \n        return {\n            type: classParts[2],\n            color: classParts[3]\n        };\n    };\n\n    var ThemeConfigMemento = {\n        saveTheme: function(layoutClass) {\n            if (window.sessionStorage) {\n                window.sessionStorage.setItem(\n                    'dashboard-layout-class',\n                    layoutClass\n                );\n            }\n        },\n        restoreTheme: function($layoutElement) {\n            if (window.sessionStorage && $layoutElement.length > 0) {\n                var themeClass = window.sessionStorage.getItem(\n                    'dashboard-layout-class'\n                );\n                if (themeClass) {\n                    $layoutElement.removeClass(layoutThemeFilter);\n                    $layoutElement.addClass(themeClass);\n\n                    var themeConfig = parseClass(themeClass);\n                    $layoutElement.trigger('theme-changed', {\n                        type: themeConfig.type,\n                        color: themeConfig.color\n                    });\n                }\n            }\n        }\n    };\n\n    function ThemeConfig($layout, $typeSwitches, $colorSwitches, $resetButton) {\n        this.$layout = $layout;\n        this.$typeSwitches = $typeSwitches;\n        this.$colorSwitches = $colorSwitches;\n    \n        this.initialStyleClass = findThemeClass($layout);\n        if (this.initialStyleClass && $resetButton) {\n            var _this = this;\n            $resetButton.on('click', function() {\n                _this.clearClass();\n    \n                _this.$layout.addClass(_this.initialStyleClass);\n    \n                _this.updateCheckboxes();\n\n                var parsedClass = parseClass(_this.initialStyleClass);\n                _this.$layout\n                    .trigger('theme-changed', {\n                        type: parsedClass.type,\n                        color: parsedClass.color\n                    });\n            });\n        }\n    }\n\n    ThemeConfig.prototype.buildClass = function(type, color) {\n        return 'layout--theme--' + type + '--' + color;\n    };\n    \n    ThemeConfig.prototype.clearClass = function() {\n        this.$layout.removeClass(layoutThemeFilter);\n    };\n    \n    ThemeConfig.prototype.updateCheckboxes = function() {\n        var currentThemeClass = findThemeClass(this.$layout);\n        var currentThemeConfig = parseClass(currentThemeClass);\n    \n        this.$typeSwitches.each(function() {\n            this.checked = this.value === currentThemeConfig.type;\n        });\n    \n        this.$colorSwitches.each(function() {\n            this.checked = this.value === currentThemeConfig.color;\n        });\n    }\n    \n    ThemeConfig.prototype.startup = function() {\n        var _this = this;\n        // Update the Theme Selector\n        this.updateCheckboxes();\n    \n        // Define Change handler\n        function switchHandler() {\n            var type = _this.$typeSwitches.filter(':checked').val();\n            var color = _this.$colorSwitches.filter(':checked').val();\n            \n            // Clear previous class\n            _this.clearClass();\n    \n            // Generate classs name\n            var layoutClass = this.buildClass(type, color);\n            // Apply the class and notify listeners\n            _this.$layout\n                .addClass(layoutClass)\n                .trigger('theme-changed', { type: type, color: color });\n            // Save the class for page transitions\n            ThemeConfigMemento.saveTheme(layoutClass);\n        }\n    \n        // Attach Event Handler\n        this.$typeSwitches.on('change', switchHandler.bind(this));\n        this.$colorSwitches.on('change', switchHandler.bind(this));\n    };\n\n    window.Dashboard = Object.assign({ }, window.Dashboard || { }, {\n        ThemeConfig: ThemeConfig,\n        ThemeConfigMemento: ThemeConfigMemento\n    });    \n})();"]}